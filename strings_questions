# -*- coding: utf-8 -*-
"""python_questions_strings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RLaBUS9FHXVx_8FrN_x9MPZ6X-1NGs75
"""

s = "my name is eshan"
for i in s.split(" "):
    j = i[::-1]
    print(j,end=" ")

#reverse a string without using the string function.
s = "my name is eshan"
t = s.split(" ")
y = t[::-1]
print(y)

#count words in a given string.
s = "my name is eshan"
count = 1
for i in s:
  if i == " ":
    count +=1
print(count)

#usage of + and * in a string
#"+" is used for concatenation.
s = "jaritika"
t = "stupid"
y = s + " is " + t
print(y)

#"*" is used for repitation
s = "k"
t = s*10
print(t)

#Take input from the user of string and word.check if that word exists in a string or not.
userinput = input("what is the sentence: ")
userinputword = input("please enter the word to search: ")

if userinputword in userinput:
  print("This exist")
else:
  print("not")

#Take a string from the user and count vowels in it .
s = input("enter the string: ")
t = "AEIOUaeiou"
count = 0
for i in s:
  if i in t:
    count+=1
print(count)

#take a string from the user and count vowels in it  and not take duplicates i.e count duplicate only once
s = input("enter the string: ")
t = "AEIOUaeiou"
count = 0
for i in t:
  if i in s:
    count+=1
print(count)

#check if 2 strings are anagrams
a = "listen"
d  = set(a)
b = "silent"
e = set(b)
d1={}
d2={}
s1 = "listnn"
a = set(s1)
s2 = "silent"
b = set(s2)
d = {}
d1 = {}
if len(s1) == len(s2):
    print("yes, continue")
    for i in a:
        count = 0
        for j in range(len(s1)):
          if i == s1[j]:
            count = count +  1
        d[i] = count
    print(d)

    for i in b:
        count = 0
        for j in range(len(s2)):
           if i == s2[j]:
            count = count +  1
        d1[i] = count
    print(d1)
    if d == d1:
        print("anagram")
    else:
        print("not")
else:
    print("cant be anagram")

)#check occurence of each word in a sentence
a = "lisssten"
s = set(a)
for i in s:
  count = 0
  for k in range(0,len(a)):
    if i in a[k]:
      count +=1
  print(i,":",count)

s = "my name is is is eshan"
t = s.split(" ")
y = set(t)
for i in y:
  count = 0
  for k in range(0,len(t)):
    if i in t[k]:
      count +=1
  print(i,":",count)

#Find out the letters at even and odd places
s = "mynameiseshanrai"
s1=""
s2=""
for i in s:
  if s.index(i) % 2 == 0:
    s1 = s1 + i
  else:
    s2 = s2 + i
print(s1)
print(s2)
# print(l)
# lf = ''.join(l)
# print(lf)
# print(l2)
# lr = ''.join(l2)
# print(lr)

'#Check the presence of a letter in a string.'
s = "eshanraiandritikajain"
d = True
for i in s:
  if i == "m":
    d = False
if d== False:
  print("yes")
else:
  print("bhak")

#Check letter and their digit alphabetically and then sum. for small letters
a = "ESHAN"
c = a.lower()  xxxxxxxxxxxxxxxxxxxxxxxxxxx222222222222
l =[]
print(c)
for i in c:
 number = ord(i) - 96
 l.append(number)
print(sum(l))

#Check letter and their digit alphabetically and then sum. for small letters
a = "ESHAN"
l =[]
print(a)
for i in a:
 number = ord(i) - 64
 l.append(number)
print(sum(l))

#Check letter and their digit alphabetically and then sum for both
a = "EshAN"
l =[]
print(a)
for i in a:
 if i.islower():
  number = ord(i)-96
  l.append(number)
 else:
   number = ord(i) - 64
   l.append(number)
print(sum(l))

#Check whether the string is palindrome or not.
s = "radar"
reverse_string = s[::-1]
if s == reverse_string:
  print("palindrome")
else:
  print("not palindrome")

#Convert lower to upper case & upper to lower case. Ex: I/P : “Eshan” O/P “ : “eSHAN”
s = "Eshan"
for i in s:
  if i.islower():
    print(i.upper(),end="")

  else:
    print(i.lower(),end="")

#Remove duplicate characters from the string
s = "eshanrairitikajain"
l = ""
for i in s:
  if s.count(i) == 1:
   l= l + i
print(l)

#Remove duplicate characters from the string w/o count
s = "eshanrairitikajain"
j=set(s)
s1=""
for i in j:
  count = 0
  for k in range(0,len(s)):
    if i in s[k]:
      count +=1
  if count==1:
    s1=s1+i
print(s1)

#Find the length of the last word.
s = "my name is eshan"
l = s.split(" ")
a = l[::-1]
print(a)
print(len(a[0]))

s = "my name is eshan",ø
print(len(s[::-1].split(" ")[0]))

#Check if all A’s appear before all B’s.
s= "aaabbcgfbga"
print(s.index("b"))
for i in range(3,len(s)):
  if s[i] == "a":
    print("wrong string")
    break
else:
    print("correct")

# Reverse only the vowels in a string. ForEx: I/P : “Hello”  O/P : “Holle”, I/P : “leetcode” O/P : “leotcede”
s = "hello"
j = "AEIOUaeiou"
l_vowels = []
a = list(s)
for i in s:
  if i in j:
    l_vowels.append(i)
print(a)  #['h', 'e', 'l', 'l', 'o']
print(l_vowels)  #['e', 'o']
for k in range(len(s)):
  if a[k] in j:
     a[k] = l_vowels.pop(-1)
print("".join(a))

#Find index of first non-repeating character in a string if not return -1. ForEx: I/P : “leetcode” O/P : 0 , I/P : loveleetcode O/P: 2
s = "loveleetcode"
a = list(s)
for i in s:
  count = 0
  for k in range(0,len(a)):
     if i in s[k]:
       count+=1
  if count == 1:
    print(s.index(i))
    break

#Rotate a string at n no. of rotation. ForEx: I/P : abcde O/P : eabcd (1 rotation)
s = "eshan"
user = int(input("enter the number of rotation: "))
# s[-1]
# s2 = s2 + s[-1]
for i in range(user):
  s = s[-1] + s[:len(s)-1]
print(s)

# Given number of email ids. Find ldap of each.
s = "erai@google.com,jaritika@google.com,harmamans@google.com,abin@google.com"
for i in s.split(","):
  print(i.split("@")[0])

#Find the longest common prefix exists in an array of strings else return empty string. ForEx: I/P : arr=[“flower”,”fly”,”flow”] O/P: “fl”
s = ["fly","flower","flow"]
l = ""
for i in range(len(s[0])):
  ch = s[0][i]
  match = True

  for j in range(1,len(s)):
    ch1 = len(s[j])
    if ch1<i or ch != s[j][i]:
      match = False
      break
  if match == False:
            break
  else:
   l = l + ch
print(l)

#decorator
# def func1():
#   print("yes, I am learning")
# func2 = func1
# del func1
# func2()
def func(func):
  func("this")
func(print)

def dec1(func):
  def nowexec():
    print("nowexecuted")
    func()
    print("executed")
  return nowexec

def who_is_eshan():
  print("eshan ")
who_is_eshan = dec1(who_is_eshan)
who_is_eshan()

n = "mynameiseshan"
count = 0
for i in n:

  if i != " ":
    count = count + 1
print(count)

l = [1,2,3,4,5]
count = 0
for i in l:
  if i!=" ":
   count = count + 1
print(count)

s = "mynameisiseshaneshan"
a = set(s)
for i in a:
  count = 0
  for j in range(len(s)):
    if i in s[j]:
      count = count+1
  print(i,",",count)

def decorator(func):
  def nowexec():
    print(" now is executed")
    func()
    print("This is final")
  return nowexec

# @decorator
def call():
  print("eshan")
call = decorator(call)
call()

n = [1,2,3,4,5]
for i in n:
  count +=1
print(count)

def sq(a):
  return a*a
s = list(map(sq,[1,2,3,4,5]))
print(s)

l = [1,2,3,4,5,6,7]
def sq(a):
 return a>5
s = list(filter(sq,l))
print(s)

from functools import reduce
l = reduce(lambda x,y:x+y,[1,2,3,4,5])
print(l)

#
s = [0,1,0,1,0,1,0,1,1,0,1]
count0=0
count1=0

for i in s:
  if i==0:
    count0=count0+1
  elif i==1:
    count1=count1+1
s.clear()

for i in range(count0):
  s.append(0)
for j in range(count1):
  s.append(1)
print(s)

